#pragma once

#include "phi.h"

#include <cmath>

struct ValueTupel {
	float alpha;
	float cl;
	float cd;
};


/*
  NACA 0015
   alpha    CL        CD    
  ------ -------- --------- 
*/

std::vector<ValueTuple> naca_0015 = {
 { -11.000,  -0.8022,   0.07748 }, 
 { -10.750,  -0.8442,   0.07035 }, 
 { -10.500,  -0.8851,   0.06475 }, 
 { -10.250,  -0.9176,   0.05969 }, 
 { -10.000,  -0.9434,   0.05517 }, 
 {  -9.750,  -0.9165,   0.05358 }, 
 {  -9.500,  -0.9248,   0.05030 }, 
 {  -9.250,  -0.9332,   0.04694 }, 
 {  -9.000,  -0.9132,   0.04547 }, 
 {  -8.750,  -0.9076,   0.04310 }, 
 {  -8.500,  -0.8997,   0.04122 }, 
 {  -8.250,  -0.8818,   0.03986 }, 
 {  -8.000,  -0.8680,   0.03838 }, 
 {  -7.750,  -0.8545,   0.03697 }, 
 {  -7.500,  -0.8402,   0.03572 }, 
 {  -7.250,  -0.8248,   0.03461 }, 
 {  -7.000,  -0.8089,   0.03359 }, 
 {  -6.750,  -0.7934,   0.03263 }, 
 {  -6.500,  -0.7795,   0.03164 }, 
 {  -6.250,  -0.7622,   0.03086 }, 
 {  -6.000,  -0.7431,   0.03032 }, 
 {  -5.750,  -0.7273,   0.02963 }, 
 {  -5.500,  -0.7103,   0.02904 }, 
 {  -5.250,  -0.6910,   0.02869 }, 
 {  -5.000,  -0.6765,   0.02808 }, 
 {  -4.750,  -0.6558,   0.02790 }, 
 {  -4.500,  -0.6380,   0.02761 }, 
 {  -4.250,  -0.6209,   0.02729 }, 
 {  -4.000,  -0.6011,   0.02725 }, 
 {  -3.750,  -0.5860,   0.02691 }, 
 {  -3.500,  -0.5652,   0.02701 }, 
 {  -3.250,  -0.5463,   0.02705 }, 
 {  -3.000,  -0.5299,   0.02694 }, 
 {  -2.750,  -0.5069,   0.02726 }, 
 {  -2.500,  -0.4886,   0.02733 }, 
 {  -2.250,  -0.4624,   0.02772 }, 
 {  -2.000,  -0.4322,   0.02817 }, 
 {  -1.750,  -0.3985,   0.02859 }, 
 {  -1.500,  -0.3429,   0.02935 }, 
 {  -1.250,  -0.2907,   0.02981 }, 
 {  -1.000,  -0.2043,   0.03039 }, 
 {  -0.750,  -0.1382,   0.03057 }, 
 {  -0.500,  -0.0601,   0.03056 }, 
 {  -0.250,   0.0230,   0.03035 }, 
 {   0.000,   0.0000,   0.03036 }, 
 {   0.250,  -0.0230,   0.03035 }, 
 {   0.500,   0.0600,   0.03056 }, 
 {   0.750,   0.1382,   0.03056 }, 
 {   1.000,   0.2042,   0.03039 }, 
 {   1.250,   0.2906,   0.02981 }, 
 {   1.500,   0.3428,   0.02934 }, 
 {   1.750,   0.3983,   0.02858 }, 
 {   2.000,   0.4321,   0.02816 }, 
 {   2.250,   0.4623,   0.02771 }, 
 {   2.500,   0.4886,   0.02733 }, 
 {   2.750,   0.5068,   0.02726 }, 
 {   3.000,   0.5298,   0.02694 }, 
 {   3.250,   0.5462,   0.02704 }, 
 {   3.500,   0.5651,   0.02701 }, 
 {   3.750,   0.5859,   0.02691 }, 
 {   4.000,   0.6009,   0.02725 }, 
 {   4.250,   0.6208,   0.02729 }, 
 {   4.500,   0.6379,   0.02760 }, 
 {   4.750,   0.6556,   0.02790 }, 
 {   5.000,   0.6764,   0.02807 }, 
 {   5.250,   0.6909,   0.02869 }, 
 {   5.500,   0.7102,   0.02904 }, 
 {   5.750,   0.7272,   0.02962 }, 
 {   6.000,   0.7430,   0.03031 }, 
 {   6.250,   0.7621,   0.03086 }, 
 {   6.500,   0.7795,   0.03163 }, 
 {   6.750,   0.7934,   0.03263 }, 
 {   7.000,   0.8088,   0.03359 }, 
 {   7.250,   0.8247,   0.03460 }, 
 {   7.500,   0.8401,   0.03572 }, 
 {   7.750,   0.8544,   0.03697 }, 
 {   8.000,   0.8680,   0.03838 }, 
 {   8.250,   0.8818,   0.03986 }, 
 {   8.500,   0.8996,   0.04122 }, 
 {   8.750,   0.9077,   0.04310 }, 
 {   9.000,   0.9132,   0.04547 }, 
 {   9.250,   0.9334,   0.04694 }, 
 {   9.500,   0.9249,   0.05030 }, 
 {   9.750,   0.9167,   0.05358 }, 
 {  10.000,   0.9434,   0.05519 }, 
 {  10.250,   0.9177,   0.05971 }, 
 {  10.500,   0.8853,   0.06478 }, 
 {  10.750,   0.8443,   0.07039 }, 
 {  11.000,   0.8024,   0.07755 },
};

/*
NACA 2408
   alpha    CL        CD       CDp       CM     Top_Xtr  Bot_Xtr
  ------ -------- --------- --------- -------- -------- --------
  -9.250  -0.5158   0.11581   0.10876  -0.0005   1.0000   0.2147
  -9.000  -0.5047   0.11139   0.10435   0.0000   1.0000   0.2243
  -8.750  -0.5244   0.11068   0.10379  -0.0033   1.0000   0.2309
  -8.500  -0.5127   0.10634   0.09946  -0.0023   1.0000   0.2449
  -8.250  -0.5012   0.10208   0.09521  -0.0015   1.0000   0.2582
  -8.000  -0.4921   0.09805   0.09121  -0.0010   1.0000   0.2692
  -7.750  -0.4902   0.09472   0.08794  -0.0011   1.0000   0.2807
  -7.250  -0.4846   0.08830   0.08163  -0.0003   1.0000   0.3105
  -7.000  -0.4846   0.08558   0.07899   0.0007   1.0000   0.3308
  -6.750  -0.4857   0.08261   0.07611   0.0014   1.0000   0.3510
  -6.500  -0.4754   0.07928   0.07280   0.0035   1.0000   0.3751
  -6.250  -0.4705   0.07597   0.06952   0.0049   1.0000   0.3970
  -5.500  -0.4465   0.04776   0.04000  -0.0398   1.0000   0.1601
  -5.250  -0.4272   0.04311   0.03498  -0.0403   1.0000   0.1525
  -5.000  -0.4072   0.03925   0.03059  -0.0407   1.0000   0.1547
  -4.750  -0.3850   0.03567   0.02638  -0.0408   1.0000   0.1562
  -4.500  -0.3609   0.03247   0.02253  -0.0405   1.0000   0.1573
  -4.250  -0.3387   0.03039   0.02033  -0.0397   1.0000   0.1676
  -4.000  -0.3137   0.02816   0.01765  -0.0392   1.0000   0.1754
  -3.750  -0.2883   0.02626   0.01548  -0.0385   1.0000   0.1834
  -3.500  -0.2627   0.02455   0.01358  -0.0378   1.0000   0.1952
  -3.250  -0.2371   0.02316   0.01202  -0.0371   1.0000   0.2177
  -3.000  -0.2125   0.02182   0.01085  -0.0362   1.0000   0.2541
  -2.750  -0.1858   0.02018   0.00951  -0.0355   1.0000   0.3257
  -2.500  -0.1645   0.01790   0.00857  -0.0337   1.0000   0.5168
  -2.250  -0.1218   0.01600   0.00775  -0.0327   1.0000   1.0000
  -2.000  -0.1006   0.01601   0.00727  -0.0320   1.0000   1.0000
  -1.750  -0.0793   0.01607   0.00695  -0.0313   1.0000   1.0000
  -1.500  -0.0579   0.01616   0.00673  -0.0306   1.0000   1.0000
  -1.250  -0.0363   0.01628   0.00657  -0.0300   1.0000   1.0000
  -1.000  -0.0147   0.01644   0.00651  -0.0294   1.0000   1.0000
  -0.750   0.0068   0.01664   0.00651  -0.0288   1.0000   1.0000
  -0.500   0.0283   0.01687   0.00656  -0.0284   1.0000   1.0000
  -0.250   0.0497   0.01714   0.00669  -0.0279   1.0000   1.0000
   0.000   0.0709   0.01747   0.00690  -0.0276   1.0000   1.0000
   0.250   0.0918   0.01784   0.00717  -0.0273   1.0000   1.0000
   0.500   0.1125   0.01826   0.00751  -0.0271   1.0000   1.0000
   0.750   0.1327   0.01875   0.00795  -0.0269   1.0000   1.0000
   1.000   0.1525   0.01931   0.00846  -0.0268   1.0000   1.0000
   1.250   0.1719   0.01995   0.00907  -0.0269   1.0000   1.0000
   1.500   0.1907   0.02066   0.00978  -0.0270   1.0000   1.0000
   1.750   0.2090   0.02146   0.01058  -0.0272   1.0000   1.0000
   2.000   0.2269   0.02235   0.01148  -0.0275   1.0000   1.0000
   2.250   0.2794   0.02355   0.01277  -0.0342   0.9858   1.0000
   2.500   0.3384   0.02464   0.01398  -0.0418   0.9647   1.0000
   2.750   0.3896   0.02553   0.01504  -0.0475   0.9419   1.0000
   3.000   0.4445   0.02628   0.01599  -0.0533   0.9200   1.0000
   3.250   0.4931   0.02685   0.01679  -0.0576   0.8964   1.0000
   3.500   0.5394   0.02726   0.01745  -0.0609   0.8722   1.0000
   3.750   0.5930   0.02730   0.01783  -0.0647   0.8485   1.0000
   4.000   0.6410   0.02703   0.01789  -0.0665   0.8235   1.0000
   4.250   0.6805   0.02667   0.01786  -0.0664   0.7957   1.0000
   4.500   0.7211   0.02559   0.01708  -0.0647   0.7638   1.0000
   4.750   0.7519   0.02392   0.01557  -0.0597   0.7179   1.0000
   5.000   0.7757   0.02239   0.01406  -0.0536   0.6627   1.0000
   5.250   0.7942   0.02177   0.01339  -0.0486   0.6037   1.0000
   5.500   0.8098   0.02164   0.01319  -0.0440   0.5323   1.0000
   5.750   0.8138   0.02235   0.01317  -0.0376   0.3749   1.0000
   6.000   0.8187   0.02581   0.01499  -0.0334   0.2201   1.0000
   6.250   0.8401   0.02806   0.01686  -0.0320   0.1788   1.0000
   6.500   0.8678   0.03023   0.01896  -0.0312   0.1592   1.0000
   6.750   0.8978   0.03268   0.02152  -0.0306   0.1477   1.0000
   7.000   0.9250   0.03533   0.02433  -0.0300   0.1382   1.0000
   7.250   0.9498   0.03812   0.02711  -0.0294   0.1278   1.0000
   7.500   0.9712   0.04130   0.03099  -0.0279   0.1244   1.0000
   7.750   0.9897   0.04448   0.03461  -0.0265   0.1187   1.0000
   8.000   1.0078   0.04832   0.03866  -0.0255   0.1136   1.0000
   8.250   1.0203   0.05265   0.04355  -0.0238   0.1134   1.0000
   8.500   1.0281   0.05723   0.04867  -0.0221   0.1135   1.0000
   8.750   1.0307   0.06193   0.05388  -0.0205   0.1134   1.0000
   9.000   1.0303   0.06688   0.05923  -0.0191   0.1136   1.0000
   9.250   1.0245   0.07189   0.06468  -0.0179   0.1155   1.0000
   9.500   0.9834   0.07910   0.07244  -0.0181   0.1245   1.0000
   9.750   0.9758   0.08468   0.07811  -0.0182   0.1267   1.0000
  10.000   0.7879   0.08467   0.07838  -0.0136   0.1366   1.0000
  10.250   0.7659   0.09338   0.08709  -0.0175   0.1439   1.0000

*/


struct Curve {
	std::vector<ValueTupel> data;

	Curve(const std::vector<ValueTupel>& curve_data) : data(curve_data) 
	{
		for (int i = 0; i < data.size() - 1; i++)
			assert(data[i].alpha < data[i+1].alpha);
	}
	
	void sample(float alpha, float *cl, float *cd) const
	{
		assert(data[0].alpha <= alpha && alpha <= data[data.size()-1].alpha);
		for (int i = 0; i < data.size() - 1; i++)
		{
			if (data[i].alpha <= alpha && alpha <= data[i+1].alpha)
			{
				auto t0 = alpha - data[i].alpha;
				auto t1 = data[i+1].alpha - data[i].alpha;
				auto f = t0 / t1;
				cl* = std::lerp(data[i].cl, data[i+1].cl, f);
				cd* = std::lerp(data[i].cd, data[i+1].cd, f);
				return;
			}
		}
	}
};

struct Wing {
	const float area;
	const glm::vec3 offset;
	const glm::vec3 normal;
	const Curve curve;

	Wing(const glm::vec3& position_offset, float wing_area)
		: offset(position_offset), area(wing_area), normal(phi::UP)
	{}

	// drag coefficient
	float get_cd_at_aoa(float aoa) const
	{
		return 0.0f;
	}

	// lift coefficient
	float get_cl_at_aoa(float aoa) const
	{
		return 0.0f;
	}

	float get_lift(float aoa, float speed)
	{
		float cl = get_cl_at_aoa(aoa);
		return speed * speed * cl * area;
	}

	float get_drag(float aoa, float speed)
	{
		float cd = get_cd_at_aoa(aoa);
		return speed * speed * cd * area;
	}
	
	void apply_forces(phi::RigidBody& rigid_body)
	{
		auto velocity = rigid_body.get_point_velocity(offset);
		auto lift_direction = glm::normalize(glm::cross(velocity, phi::RIGHT));
		auto drag_direction = glm::normalize(-velocity);

		auto local_velocity = velocity * glm::inverse(rigid_body.rotation); // TODO: account for rotation, adds more velocity
		auto local_speed = glm::length(local_velocity);

		auto angle_of_attack = glm::angle(local_velocity, phi::FORWARD);

		float cl, cd;
		curve.sample(angle_of_attack, &cl, &cd);

		float speed2 = local_speed * local_speed;

		float lift = speed2 * cl * area; 
		float drag = speed2 * cd * area; 

		rigid_body.add_force_at_position(lift_direction * lift, offset);
		rigid_body.add_force_at_position(drag_direction * drag, offset);
	}
};

struct Engine {
	float rpm;
	void apply_forces(phi::RigidBody& rigid_body) {}
};

struct Airplane {

	phi::RigidBody rigid_body;

	Wing wing;
	Wing rudder;
	Wing elevator;

	Airplane(const glm::vec3& position, const glm::vec3& velocity, float mass)
		: 
		rigid_body(position, glm::vec3(0.0f), mass, phi::RigidBody::cube_inertia_tensor(glm::vec3(1.0f), mass)),
		wing(glm::vec3(0.5f, 0.0f, 0.0f), 10.0f),
		elevator(glm::vec3(-1.0f, 0.0f, 0.0f), 2.5f),
		rudder(glm::vec3(-1.0f, 0.1f, 0.0f), 2.0f)
	{
	}

	void update(float dt)
	{
		wing.apply_forces(rigid_body);
		elevator.apply_forces(rigid_body);
		rudder.apply_forces(rigid_body);
		rigid_body.update(dt);
	}
};
